<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="org.sil.bloom.reader">

    <!-- Used by RN for debugging -->
    <uses-permission android:name="android.permission.INTERNET" />

    <!-- Used by RN for debugging - need to remove from production-->
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>

    <!-- Get name of Wifi network for receiving books -->
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />

    <!-- So that just for the duration of WiFi transfer we can hold a lock. -->
    <uses-permission android:name="android.permission.WAKE_LOCK"/>

    <!-- On later versions of Android this seems to be needed for receiving UDP broadcasts. -->
    <uses-permission android:name="android.permission.CHANGE_WIFI_MULTICAST_STATE" />

    <!-- Used to get the device name for Wifi transfer -->
    <uses-permission android:name="android.permission.BLUETOOTH"/>

    <application
      android:name=".MainApplication"
      android:label="@string/app_name"
      android:icon="@mipmap/ic_launcher"
      android:allowBackup="false"
      android:theme="@style/AppTheme">
      <activity
        android:name=".MainActivity"
        android:label="@string/app_name"
        android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
        android:windowSoftInputMode="adjustResize">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>


            <!--
                We have three intent filters to detect when another app is trying to send us a bloom
                file. Principally this is aimed at being able to open Bloom files from File Manager
                apps. The parameters included in the intent depend on the File Manager sending it,
                so we need a variety of filters to support as many sending apps as possible.
                 - The first filter checks the file extension on intents where a MIME type
                is not set.
                 - The second filter checks the file extensions where a MIME type is set.
                Both are necessary because the sending app may or may not choose to
                include the MIME type. The MIME type is set to */* because the MIME
                type in the intent may be incorrect since our filetype is a unique one.
                Since we're still filtering by file extension, this is ok.
                 - The third filter will catch an intent if the MIME type is correct
                but the file extension is not what we expected. This should be an
                unusual case.
            -->
            <!-- Matches intents by file extension when no MIME type is set -->
            <intent-filter
                android:icon="@drawable/book"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="content" />
                <data android:scheme="file" />
                <data android:host="*" />
                <data android:pathPattern=".*bloomd" />
                <data android:pathPattern=".*bloombundle" />
            </intent-filter>

            <!-- Match intents by file extension when a MIME type is set -->
            <intent-filter
                android:icon="@drawable/book"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:mimeType="*/*" />

                <data android:scheme="content" />
                <data android:scheme="file" />
                <data android:host="*" />
                <data android:pathPattern=".*bloomd" />
                <data android:pathPattern=".*bloombundle" />
            </intent-filter>

            <!-- Match intents by MIME type in case the file extension gets lost -->
            <intent-filter
                android:icon="@drawable/book"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="content" />
                <data android:scheme="file" />
                <!-- Sometimes the MIME type we get is not exactly what we set - hence the variety of options -->
                <data android:mimeType="application/vnd.bloom" />
                <data android:mimeType="application/bloom" />
                <data android:mimeType="application/vnd.bloomd" />
                <data android:mimeType="application/bloomd" />
                <data android:mimeType="application/vnd.bloombundle" />
                <data android:mimeType="application/bloombundle" />
            </intent-filter>

        </activity>
        <activity android:name="com.facebook.react.devsupport.DevSettingsActivity" />

        <!-- Enables us to share files with other apps from specified directories -->
        <provider
            android:authorities="${applicationId}.provider"
            android:name="android.support.v4.content.FileProvider"
            android:grantUriPermissions="true"
            android:exported="false">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/filepaths" />
        </provider>
    </application>

</manifest>
